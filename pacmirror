#!/usr/bin/env python3

import subprocess
import argparse
import configparser
import shutil

def backup(config):
	shutil.copy('/etc/pacman.d/mirrorlist', '/etc/pacman.d/mirrorlist.backup')
	print('Copied /etc/pacman.d/mirrorlist to /etc/pacman.d/mirrorlist.backup.')

def update(config):
	if (config.getboolean('pacmirror','backup')):
		backup(config)
	print('Updating mirrorlist...')
	reflectorOptions = {
		#Configuration name : [command option, include param]
		'connectionTimeout' : ['--connection-timeout', True],
		'cacheTimeout'      : ['--cache-timeout', True],
		'sort'              : ['--sort', True],
		'threads'           : ['--threads', True],
		'verbose'           : ['--verbose', False],
		'age'               : ['-a', True],
		'country'           : ['-c', True],
		'fastest'           : ['-f', True],
		'include'           : ['-i', True],
		'exclude'           : ['-x', True],
		'latest'            : ['-l', True],
		'number'            : ['-n', True],
		'protocol'          : ['-p', True],
	}
	reflectorCommand = ['reflector', '--save', '/etc/pacman.d/mirrorlist']
	for option in config['reflector']:
		co = reflectorOptions[option]
		if option == "country":
			for country in config['reflector'][option].split(', '):
				reflectorCommand.append(co[0])
				reflectorCommand.append(country)
		elif (co[1]):
			reflectorCommand.append(co[0])
			reflectorCommand.append(config['reflector'][option])
		elif (config.getboolean('reflector',option)):
			reflectorCommand.append(co[0])
	subprocess.call(reflectorCommand)
	print('Mirrorlist updated.')

commands = {
	'update': update,
	'backup': backup
}

parser = argparse.ArgumentParser(description='Update the pacman mirror list using reflector. This must be run with privileges to overwrite the pacman mirrorlist.')
parser.add_argument('-c', '--conf', help='the configuration file to use, default /etc/pacmirror/pacmirror.conf', default='/etc/pacmirror/pacmirror.conf')
parser.add_argument('COMMAND', help='the command to perform, either backup or update', default='update')
args = parser.parse_args()

config = configparser.ConfigParser()
config.read(args.conf)

commands[args.COMMAND](config)

